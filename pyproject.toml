# pyproject.toml

[build-system]
requires = ["setuptools>=61.1.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "j2lint"
version = "v1.1.0"
description = "Command-line utility that validates jinja2 syntax according to Arista's AVD style guide."
readme = "README.md"
authors = [{ name = "Arista Ansible Team", email = "ansible@arista.com" }]
license = { file = "LICENSE" }
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Testing",
]
keywords = ["j2lint", "linter", "jinja", "lint"]
dependencies = [
    "jinja2>=3.0",
    "rich>=13.5.2,<13.9.0",
]
requires-python = ">=3.8"

[project.optional-dependencies]
dev = [
  "pre-commit>=3.3.3",
  "bumpver==2023.1129",
  "tox>=4.10.0,<5.0.0",
]
test = [
  "pytest>=7.4.0",
  "pytest-cov>=4.1.0",
]
lint = [
  "pylint>=3.0.0",
  "ruff>=0.5.4,<0.7.0",
  "codespell>=2.2.6,<2.4.0",
]
type = [
  "mypy==1.11.2",
]

[project.urls]
Homepage = "https://github.com/aristanetworks/j2lint.git"
"Bug Tracker" = "https://github.com/aristanetworks/j2lint/issues"

[project.scripts]
j2lint = "j2lint.cli:run"

[tool.bumpver]
current_version = "v1.1.0"
version_pattern = "vMAJOR.MINOR.PATCH"
commit_message  = "Chore: Version {old_version} -> {new_version}"
commit          = true
# No Tag
tag             = false
push            = false

[tool.bumpver.file_patterns]
"pyproject.toml" = ['current_version = "{version}"', 'version = "{version}"']
"j2lint/__init__.py" = ["{version}"]
"tests/test_cli.py" = ["{version}"]

[tool.pylint.'MESSAGES CONTROL']
max-line-length = 160

[tool.tox]
legacy_tox_ini = """
[tox]
envlist =
  clean,
  py38,
  py39,
  py310,
  py311,
  py312,
  lint,
  type,
  report

isolated_build = True

[gh-actions]
python =
  3.8: py38
  3.9: py39
  3.10: py310
  3.11: py311, coverage, report
  3.12: py312

[testenv]
description = run the test driver with {basepython}
extras = test

commands =
  pytest  {tty:--color=yes}

[testenv:lint]
description = check the code style
extras =
  lint
  test
commands =
  flake8 --max-line-length=160 --config=/dev/null j2lint
  flake8 --max-line-length=160 --config=/dev/null tests
  pylint j2lint
  pylint tests
  black --check --diff --color .
  isort --check --diff --color .

[testenv:type]
description = check the code type
extras = type
commands =
  mypy --config-file=pyproject.toml j2lint

[testenv:clean]
deps = coverage[toml]
skip_install = true
commands = coverage erase

[testenv:report]
deps = coverage[toml]
commands = coverage report --rcfile=pyproject.toml
# add the following to make the report fail under some percentage
# commands = coverage report --fail-under=80
depends = py311
"""

[tool.pytest.ini_options]
addopts = "-ra -q -s -vv --capture=tee-sys --cov --cov-append"
log_level = "WARNING"
log_cli = "True"

[tool.coverage.run]
source = ['j2lint']
omit = ["j2lint/__main__.py"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
	# Have to re-enable the standard pragma
	"pragma: no cover",

	# Don't complain about missing debug-only code:
	"def __repr__",
	"if self\\.debug",

	# Don't complain if tests don't hit defensive assertion code:
	"raise AssertionError",
	"raise NotImplementedError",

	# Don't complain if non-runnable code isn't run:
	"if 0:",
	"if __name__ == .__main__.:",

	# Don't complain about abstract methods, they aren't run:
	"@(abc\\.)?abstractmethod",

	# Don't complain about TYPE_CHECKING blocks
	"if TYPE_CHECKING:",
]

[tool.mypy]
follow_imports = "skip"
ignore_missing_imports = true
warn_redundant_casts = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
strict_optional = true

# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true
mypy_path = "j2lint"

################################
# Ruff
################################
[tool.ruff]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    ".github",
]

line-length = 165

# Assume Python 3.9 as this is the lowest supported version for ANTA
target-version = "py39"

[tool.ruff.lint]
# select all cause we like being suffering
select = ["ALL",
    # By enabling a convention for docstrings, ruff automatically ignore some rules that need to be
    # added back if we want them.
    # https://docs.astral.sh/ruff/faq/#does-ruff-support-numpy-or-google-style-docstrings
    # TODO: Augment the numpy convention rules to make sure we add all the params
    #       Uncomment below D417
    "D415",
    "D417",
]
ignore = [
  "COM812",  # Ignoring conflicting rules that may cause conflicts when used with the formatter
  "ISC001",  # Ignoring conflicting rules that may cause conflicts when used with the formatter
  "TD002",   # We don't have require authors in TODO
  "TD003",   # We don't have an issue link for all TODOs today
  "FIX002",  # Line contains TODO - ignoring for ruff for now
  "F821",    # Disable undefined-name until resolution of #10451
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pylint]
# These settings are used to configure pylint rules run in ruff. In order to keep sane and while
# we have not removed pylint completely, these settings should be kept in sync with our pylintrc file.
# https://github.com/astral-sh/ruff/issues/970
max-branches = 13

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.pep8-naming]
"ignore-names" = [
  "RICH_COLOR_PALETTE"
]

[tool.ruff.lint.flake8-type-checking]
# These classes require that type annotations be available at runtime
runtime-evaluated-base-classes = ["pydantic.BaseModel", "anta.models.AntaTest.Input"]


[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "S101",    # Complains about asserts in units and libs.
  "SLF001",  # Lots of private member accessed for test purposes
]
"tests/units/*" = [
  "ARG002",  # Sometimes we need to declare unused arguments when a parameter is not used but declared in @pytest.mark.parametrize
  "FBT001",  # Boolean-typed positional argument in function definition
  "PLR0913", # Too many arguments to function call
  "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
  "S105",    # Passwords are indeed hardcoded in tests
  "S106",    # Passwords are indeed hardcoded in tests
  "S108",    # Probable insecure usage of temporary file or directory
]
"tests/units/anta_tests/test_interfaces.py" = [
  "S104",  # False positive for 0.0.0.0 bindings in test inputs
]
"tests/units/anta_tests/*" = [
  "F401",  # In this module, we import tests.units.anta_tests.test without using it to auto-generate tests
]
"anta/*" = [
  "TRY400",  # Use `logging.exception` instead of `logging.error` - we know what we are doing
]
"anta/cli/exec/utils.py" = [
  "SLF001",  # TODO: some private members, lets try to fix
]
"anta/cli/__init__.py" = [
  "T201",  # Allow print statements
]
"anta/cli/*" = [
  "PLR0913",  # Allow more than 5 input arguments in CLI functions
  "ANN401",   # TODO: Check if we can update the Any type hints in the CLI
]
"anta/tests/field_notices.py" = [
  "PLR2004",  # Magic value used in comparison, consider replacing 2131 with a constant variable - Field notice IDs are magic values
  "C901",     # TODO: test function is too complex, needs a refactor
  "PLR0911",  # TODO: Too many return statements, same as above needs a refactor
]
"anta/tests/routing/isis.py" = [
  "C901",     # TODO: test function is too complex, needs a refactor
  "PLR0912"   # Too many branches (15/12) (too-many-branches), needs a refactor
]
"anta/decorators.py" = [
  "ANN401",  # Ok to use Any type hint in our decorators
]
"anta/tools.py" = [
  "ANN401",   # Ok to use Any type hint in our custom get functions
  "PLR0913",  # Ok to have more than 5 arguments in our custom get functions
]
"anta/device.py" = [
  "PLR0913",     # Ok to have more than 5 arguments in the AntaDevice classes
]
"anta/inventory/__init__.py" = [
  "PLR0913",     # Ok to have more than 5 arguments in the AntaInventory class
]
"examples/anta_runner.py" = [  # This is an example script and linked in  snippets
  "S108",   # Probable insecure usage of temporary file or directory
  "S105",   # Possible hardcoded password
  "INP001", # Implicit packages
]
